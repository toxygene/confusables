#!/usr/bin/env php
<?php
require __DIR__ . '/../vendor/autoload.php';

use PhpParser\BuilderFactory;
use PhpParser\Node\Expr\Array_;
use PhpParser\Node\Expr\ArrayDimFetch;
use PhpParser\Node\Expr\ArrayItem;
use PhpParser\Node\Expr\Assign;
use PhpParser\Node\Expr\AssignOp\Concat;
use PhpParser\Node\Expr\BinaryOp\NotEqual;
use PhpParser\Node\Expr\ClassConstFetch;
use PhpParser\Node\Expr\ConstFetch;
use PhpParser\Node\Expr\FuncCall;
use PhpParser\Node\Expr\Include_;
use PhpParser\Node\Expr\Isset_;
use PhpParser\Node\Expr\Variable;
use PhpParser\Node\Name;
use PhpParser\Node\Scalar\LNumber;
use PhpParser\Node\Scalar\String_;
use PhpParser\Node\Stmt\Else_;
use PhpParser\Node\Stmt\Foreach_;
use PhpParser\Node\Stmt\If_;
use PhpParser\Node\Stmt\Return_;
use PhpParser\PrettyPrinter\Standard;

preg_match_all(
    '~^(.*?)\s+;\s+(.*?) ;~um',
    file_get_contents('https://www.unicode.org/Public/security/latest/confusables.txt'),
    $matches
);

$confusables = array_combine($matches[1], $matches[2]);

$stmts = [];

$factory = new BuilderFactory;

$namespace = $factory->namespace('Confusables');

$stmts[] = $namespace->getNode();

$require = new Include_(
    new String_('vendor/autoload.php'),
    Include_::TYPE_REQUIRE_ONCE
);

$stmts[] = $require;

$use = $factory->use(Normalizer::class);

$stmts[] = $use->getNode();

$function = $factory->function('unconfuse')
    ->addParam($factory->param('string')->setTypeHint('string'))
    ->setReturnType('string')
    ->setDocComment(<<<DOC
/**
 * Replace confusable characters
 *
 * @param string \$string
 * @return string
 */
DOC
);

$arrayItems = [];

foreach ($confusables as $confusableCharacter => $replacementCharacter) {
    $arrayItems[] = new ArrayItem(
        new String_($replacementCharacter),
        new String_($confusableCharacter)
    );
}

$function->addStmt(
    new Assign(
        new Variable('confusables'),
        new Array_($arrayItems)
    )
);

// preg_split('//u', $str, -1, PREG_SPLIT_NO_EMPTY);
$splitCharacters = new FuncCall(
    new Name('preg_split'),
    [
        new String_('//u'),
        new Variable('string'),
        new LNumber(-1),
        new ConstFetch(new Name('PREG_SPLIT_NO_EMPTY'))
    ]
);

$function->addStmt(
    new Assign(
        new Variable('result'),
        new String_('')
    )
);

$function->addStmt(
    new Foreach_(
        $splitCharacters,
        new Variable('originalCharacter'),
        [
            'stmts' => [
                new Assign(
                    new Variable('code'),
                    new FuncCall(
                        new Name('str_pad'),
                        [
                            new FuncCall(
                                new Name('strtoupper'),
                                [
                                    new FuncCall(
                                        new Name('dechex'),
                                        [
                                            new FuncCall(
                                                new Name('mb_ord'),
                                                [
                                                    new Variable('originalCharacter'),
                                                    new String_('utf-8')
                                                ]
                                            )
                                        ]
                                    )
                                ]
                            ),
                            new LNumber(4),
                            new String_('0'),
                            new ConstFetch(
                                new Name('STR_PAD_LEFT')
                            )
                        ]
                    )
                ),
                new If_(
                    new Isset_(
                        [
                            new ArrayDimFetch(
                                new Variable('confusables'),
                                new Variable('code')
                            )
                        ]
                    ),
                    [
                        'stmts' => [
                            new Foreach_(
                                new FuncCall(
                                    new Name('explode'),
                                    [
                                        new String_(' '),
                                        new ArrayDimFetch(
                                            new Variable('confusables'),
                                            new Variable('code')
                                        )
                                    ]
                                ),
                                new Variable('replacementCharacter'),
                                [
                                    'stmts' => [
                                        new Concat(
                                            new Variable('result'),
                                            new FuncCall(
                                                new Name('mb_chr'),
                                                [
                                                    new FuncCall(
                                                        new Name('hexdec'),
                                                        [
                                                            new Variable('replacementCharacter')
                                                        ]
                                                    ),
                                                    new String_('utf-8')
                                                ]
                                            )
                                        )
                                    ]
                                ]
                            )
                        ],
                        'else' => new Else_(
                            [
                                new Concat(
                                    new Variable('result'),
                                    new Variable('originalCharacter')
                                )
                            ]
                        )
                    ]
                )
            ]
        ]
    )
);

$function->addStmt(
    new Return_(
        new Variable('result')
    )
);

$stmts[] = $function->getNode();

$function = $factory->function('skeleton')
    ->addParam($factory->param('string')->setTypeHint('string'))
    ->setReturnType('string')
    ->setDocComment(<<<DOC
/**
 * Get the skeleton for a unicode string
 *
 * @param string \$string
 * @return string
 */
DOC
    );

$function->addStmt(
    new Return_(
        new FuncCall(
            new Name('normalizer_normalize'),
            [
                new FuncCall(
                    new Name('unconfuse'),
                    [
                        new FuncCall(
                            new Name('normalizer_normalize'),
                            [
                                new Variable('string'),
                                new ClassConstFetch(
                                    new Name(Normalizer::class),
                                    new Name('NFD')
                                )
                            ]
                        )
                    ]
                ),
                new ClassConstFetch(
                    new Name(Normalizer::class),
                    new Name('NFD')
                )
            ]
        )
    )
);

$stmts[] = $function->getNode();

$function = $factory->function('is_confusable')
    ->addParam($factory->param('string')->setTypeHint('string'))
    ->setReturnType('boolean')
    ->setDocComment(<<<DOC
/**
 * Check if a string is confusing
 *
 * @param string \$string
 * @return bool
 */
DOC
    );

$function->addStmt(
    new Return_(
        new NotEqual(
            new Variable(
                new Name('string')
            ),
            new FuncCall(
                new Name('skeleton'),
                [
                    new Variable(
                        new Name('string')
                    )
                ]
            )
        )
    )
);

$stmts[] = $function->getNode();

$prettyPrinter = new Standard([
    'shortArraySyntax' => true
]);

file_put_contents(
    __DIR__ . '/../functions.php',
    $prettyPrinter->prettyPrintFile($stmts)
);