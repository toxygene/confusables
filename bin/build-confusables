#!/usr/bin/env php
<?php
foreach (array(__DIR__ . '/../../../autoload.php', __DIR__ . '/../vendor/autoload.php') as $file) {
    if (file_exists($file)) {
        require $file;
        break;
    }
}

use PhpParser\Comment\Doc;
use PhpParser\Node\Arg;
use PhpParser\Node\Expr\Array_;
use PhpParser\Node\Expr\ArrayDimFetch;
use PhpParser\Node\Expr\ArrayItem;
use PhpParser\Node\Expr\Assign;
use PhpParser\Node\Expr\AssignOp\Concat;
use PhpParser\Node\Expr\BinaryOp\Equal;
use PhpParser\Node\Expr\ClassConstFetch;
use PhpParser\Node\Expr\ConstFetch;
use PhpParser\Node\Expr\FuncCall;
use PhpParser\Node\Expr\Isset_;
use PhpParser\Node\Expr\MethodCall;
use PhpParser\Node\Expr\StaticPropertyFetch;
use PhpParser\Node\Expr\Variable;
use PhpParser\Node\Name;
use PhpParser\Node\Param;
use PhpParser\Node\Scalar\LNumber;
use PhpParser\Node\Scalar\String_;
use PhpParser\Node\Stmt\Class_;
use PhpParser\Node\Stmt\ClassMethod;
use PhpParser\Node\Stmt\Else_;
use PhpParser\Node\Stmt\Foreach_;
use PhpParser\Node\Stmt\If_;
use PhpParser\Node\Stmt\Namespace_;
use PhpParser\Node\Stmt\Property;
use PhpParser\Node\Stmt\PropertyProperty;
use PhpParser\Node\Stmt\Return_;
use PhpParser\Node\Stmt\Use_;
use PhpParser\Node\Stmt\UseUse;
use PhpParser\PrettyPrinter\Standard;

/**
 * Get the lastest list of confusable characters
 *
 * @return array
 */
function get_confusables(): array
{
    // Get the list of confusable characters and their replacements
    preg_match_all(
        '~^(.*?)\s+;\s+(.*?) ;~um',
        file_get_contents('https://www.unicode.org/Public/security/latest/confusables.txt'),
        $matches
    );

    $decodeHexCharacterCode = function ($hexCharacterCode) {
        return mb_chr(hexdec($hexCharacterCode));
    };

    $decodeHexCharacterCodes = function ($hexCharacterCodes) use ($decodeHexCharacterCode) {
        return implode(
            '',
            array_map(
                $decodeHexCharacterCode,
                explode(' ', $hexCharacterCodes)
            )
        );
    };

    return array_combine(
        array_map(
            $decodeHexCharacterCode,
            $matches[1]
        ),
        array_map(
            $decodeHexCharacterCodes,
            $matches[2]
        )
    );
}

/**
 * Build the confusables class
 *
 * @return Class_
 */
function buildConfusablesClass(): Class_
{
    return new Class_(
        'Confusables',
        [
            'stmts' => [
                buildConfusablesStaticProperty(),
                buildUnconfuseMethod(),
                buildSkeletonMethod(),
                buildIsConfusableMethod()
            ]
        ]
    );
}

/**
 * Build the confusables static property
 *
 * @return Property
 */
function buildConfusablesStaticProperty(): Property
{
    $confusables = get_confusables();

    return new Property(
        Class_::MODIFIER_STATIC | Class_::MODIFIER_PUBLIC,
        [
            new PropertyProperty(
                new Name('confusables'),
                new Array_(
                    array_map(
                        function ($confusableCharacter, $replacementCharacters) {
                            return new ArrayItem(
                                new String_($replacementCharacters),
                                new String_($confusableCharacter)
                            );
                        },
                        array_keys($confusables),
                        array_values($confusables)
                    )
                )
            )
        ],
        [
            'comments' => [
                new Doc(<<<DOC
/**
 * Confusable characters and their replacements
 *
 * @var string
 */
DOC
                )
            ]
        ]
    );
}

/**
 * Build the unconfuse method
 *
 * @return ClassMethod
 */
function buildUnconfuseMethod(): ClassMethod
{
    return new ClassMethod(
        new Name('unconfuse'),
        [
            'flags' => Class_::MODIFIER_PRIVATE,
            'params' => [
                new Param(
                    'input',
                    null,
                    'string'
                )
            ],
            'returnType' => new Name('string'),
            'stmts' => [
                new Assign(new Variable('output'), new String_('')),
                new Foreach_(
                    new FuncCall(
                        new Name('preg_split'),
                        [
                            new String_('//u'),
                            new Variable('input'),
                            new LNumber(-1),
                            new ConstFetch(new Name('PREG_SPLIT_NO_EMPTY'))
                        ]
                    ),
                    new Variable('originalCharacter'),
                    [
                        'stmts' => [
                            new If_(
                                new Isset_(
                                    [
                                        new ArrayDimFetch(
                                            new StaticPropertyFetch(
                                                new Name('self'),
                                                'confusables'
                                            ),
                                            new Variable('originalCharacter')
                                        )
                                    ]
                                ),
                                [
                                    'stmts' => [
                                        new Concat(
                                            new Variable(new Name('output')),
                                            new ArrayDimFetch(
                                                new StaticPropertyFetch(
                                                    new Name('self'),
                                                    'confusables'
                                                ),
                                                new Variable('originalCharacter')
                                            )
                                        )
                                    ],
                                    'else' => new Else_(
                                        [
                                            new Concat(
                                                new Variable('output'),
                                                new Variable('originalCharacter')
                                            )
                                        ]
                                    )
                                ]
                            )
                        ]
                    ]
                ),
                new Return_(new Variable('output'))
            ]
        ],
        [
            'comments' => [
                new Doc(<<<DOC
/**
 * Replace confusable characters in a string with their replacement characters
 *
 * @param string \$input
 * @return string
 */
DOC
                )
            ]
        ]
    );
}

/**
 * Build the skeleton method
 *
 * @return ClassMethod
 */
function buildSkeletonMethod(): ClassMethod
{
    return new ClassMethod(
        new Name('skeleton'),
        [
            'flags' => Class_::MODIFIER_PUBLIC,
            'params' => [
                new Param(
                    'input',
                    null,
                    'string'
                )
            ],
            'returnType' => 'string',
            'stmts' => [
                new Return_(
                    new FuncCall(
                        new Name('normalizer_normalize'),
                        [
                            new MethodCall(
                                new Variable('this'),
                                'unconfuse',
                                [
                                    new Arg(
                                        new FuncCall(
                                            new Name('normalizer_normalize'),
                                            [
                                                new Variable('input'),
                                                new ClassConstFetch(
                                                    new Name('Normalizer'),
                                                    'FORM_D'
                                                )
                                            ]
                                        )
                                    )
                                ]
                            ),
                            new ClassConstFetch(
                                new Name('Normalizer'),
                                'FORM_D'
                            )
                        ]
                    )
                )
            ]
        ],
        [
            'comments' => [
                new Doc(<<<DOC
/**
 * Get the skeleton of a string
 *
 * @param string \$input
 * @return string
 */
DOC
                )
            ]
        ]
    );
}

/**
 * Build the is confusable class method
 *
 * @return ClassMethod
 */
function buildIsConfusableMethod(): ClassMethod
{
    return new ClassMethod(
        'isConfusable',
        [
            'flags' => Class_::MODIFIER_PUBLIC,
            'params' => [
                new Param('a', null, 'string'),
                new Param('b', null, 'string'),
            ],
            'returnType' => 'bool',
            'stmts' => [
                new Return_(
                    new Equal(
                        new MethodCall(
                            new Variable('this'),
                            'skeleton',
                            [
                                new Arg(
                                    new Variable('a')
                                )
                            ]
                        ),
                        new MethodCall(
                            new Variable('this'),
                            'skeleton',
                            [
                                new Arg(
                                    new Variable('b')
                                )
                            ]
                        )
                    )
                )
            ]
        ],
        [
            'comments' => [
                new Doc(<<<DOC
/**
 * Check if two strings are confusable with each other
 *
 * @param string \$a
 * @param string \$b
 * @return boolean
 */
DOC
                )
            ]
        ]
    );
}

$stmts = [
    new Namespace_(new Name('Confusables')),
    new Use_([new UseUse(new Name('Normalizer'))]),
    buildConfusablesClass()
];

$prettyPrinter = new Standard([
    'shortArraySyntax' => true
]);

@mkdir(
    __DIR__ . '/../src'
);

file_put_contents(
    __DIR__ . '/../src/Confusables.php',
    $prettyPrinter->prettyPrintFile($stmts)
);
